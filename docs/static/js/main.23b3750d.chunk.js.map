{"version":3,"sources":["component/AddCategory.js","helpers/GetGif.js","component/GifGridItem.js","component/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","trim","length","categories","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAEaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAkB9C,OACI,mCACI,uBAAMC,SAXO,SAACC,GAClBA,EAAEC,iBACFC,QAAQC,IAAI,gBACRN,EAAWO,OAAOC,OAAS,IAC3BV,GAAc,SAAAW,GAAU,OAAKT,GAAL,mBAAoBS,OAC5CR,EAAc,MAMd,UACI,uDAEA,uBAAOS,KAAK,OACRC,MAAOX,EACPY,SArBU,SAACT,GAEvBF,EAAcE,EAAEU,OAAOF,gB,+BCRlBG,EAAM,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,4DACH,mCACTC,EAFY,iDAEoCC,UAAUH,GAF9C,6BACH,oCADG,SAGCI,MAAMF,GAHP,cAGZG,EAHY,gBAIKA,EAAKC,OAJV,uBAIVC,EAJU,EAIVA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATxB,kBAcXM,GAdW,4CAAH,sDCENO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAGlC,OACI,sBAAKc,UAAU,yCAAf,UAGA,qBAAKC,IAAKf,EAAKgB,IAAMN,IACrB,4BAAIA,QCLCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAc,IAAD,EACZhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAmBtC,OAbAC,qBAAU,WACNxB,EAAOC,GACFwB,MAAK,SAAAC,GAEEH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAG1B,CAACpB,IAIGqB,EDbwBK,CAAa1B,GAAhCa,EANyB,EAM9BN,KAAaa,EANiB,EAMjBA,QAepB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAGZ,qBAAKA,UAAU,aAAf,SAEQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEjCxBgB,EAAe,WAAM,MAGM3C,mBAAS,IAHf,mBAGvBU,EAHuB,KAGXX,EAHW,KAU9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,6BAEQW,EAAWe,KAAK,SAACT,GAAD,OAEhB,aADA,CACC,EAAD,CAEAA,SAAYA,GADPA,Y,MCjBzB4B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.23b3750d.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');//useStates vacio es undefined\n\n    const handleImputChange = (e) => {\n        //console.log(e.target.value);\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log('submit hecho');\n        if (inputValue.trim().length > 2) {\n            setCategories(categories => [inputValue, ...categories]);//agrega la nueva categoria ingrtesadaen el input, luego las que estaban previamente utilizando el operador spreed\n            setInputValue('');\n        }\n    }\n\n    return (\n        <>\n            <form onSubmit={handleSubmit}>\n                <h2>AddCategory component</h2>\n\n                <input type=\"text\"\n                    value={inputValue}\n                    onChange={handleImputChange}\n                ></input>\n            </form>\n\n        </>\n    )\n}\n\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","export const getGif = async ( category ) => {\n    const apiKey = '2beTjWtztNlk4E2OVSwjgmCfo6FO3lGt';\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${apiKey}`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    //console.log(gifs)\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({id,title,url}) => {\n\n    //console.log(id,title,url);\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            \n\n        <img src={url} alt ={title} />\n        <p>{title}</p>\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react'\n// import { getGif } from '../helpers/GetGif';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n import { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n\n\n    //const [images, setImages] = useState([])\n\n    const {data:images, loading} = useFetchGifs(category);\n    // con el : se renombran los atributos.\n\n    /*\n    //ejecuta la instruccion una unica vez cuando se renderiza la pag\n    useEffect(() => {\n        getGif(category) //retorna promesa desde el helper\n        //.then( imgs => setImages(imgs)); // aqui se llama explicitamente el metodo con el argumento retornado por la promesa.\n        .then( setImages);// aqui la res√πesta de la promesa se le indica solo el metodo y funciona igual que arriba\n    }, [category]);\n\n    */\n\n\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\n            {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n\n            {\n            <div className=\"card-grid \">\n                {\n                    images.map(img => (\n                        <GifGridItem\n                            key={img.id}\n                            {...img} \n                            />\n                    ))\n                }\n            </div>\n        }\n        </>\n    )\n}\n","//los hooks no son mas que funciones-\n\nimport { useEffect, useState } from \"react\"\nimport { getGif } from \"../helpers/GetGif\";\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGif(category)\n            .then(imgs => {\n  \n                    setState({\n                        data: imgs,\n                        loading: false\n                    });\n            })\n    }, [category])\n\n\n\n    return state;//\n}","import React, { useState } from 'react'\nimport { AddCategory } from './component/AddCategory';\nimport { GifGrid } from './component/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    //const categories =  ['one', 'samurai', 'dragon'];\n    const [categories, setCategories] = useState([]);\n\n    const handleAdd =()=>{\n        // setCategories([...categories,'hunter']);\n        // setCategories(categories => [...categories, 'hunterhunter']);\n    }\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            {/* <button onClick={handleAdd}>Agregar</button> */}\n            <ol>\n                {\n                    categories.map( (category)=> \n                    //  <li key={ category }> { category } </li>\n                    <GifGrid \n                    key={category}\n                    category = {category}/>\n                    )\n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n// import App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <GifExpertApp/>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}